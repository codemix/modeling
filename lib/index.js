"use strict";

var Classing = require('classing'),
    Casting = require('casting'),
    Validating = require('validating');


var Modeling = Classing.extend({
  /**
   * Make the static methods for a class.
   *
   * @param  {Function} Class        The class itself.
   * @param  {Object}   descriptors  The property descriptors for the class.
   */
  makeStatic: {
    value: function (Class, descriptors) {
      var Modeling = this; // to allow subclassing
      Classing.makeStatic(Class, descriptors);
      Object.defineProperties(Class, {
        /**
         * Update any autogenerated functions.
         */
        updateAutoGeneratedFunctions: {
          configurable: true,
          value: function () {

            if (!this.prototype.applyDefaults || this.prototype.applyDefaults.isAutoGenerated) {
              this.prototype.applyDefaults = this.makeApplyDefaults(descriptors);
            }
            if (!this.prototype.configure || this.prototype.configure.isAutoGenerated) {
              this.prototype.configure = this.makeConfigure(descriptors);
            }
            if (!this.prototype.toJSON || this.prototype.toJSON.isAutoGenerated) {
              this.prototype.toJSON = this.makeToJSON(descriptors);
            }
            if (!this.cast || this.cast.isAutoGenerated) {
              this.cast = this.makeCast(descriptors);
            }
            if (!this.validate || this.validate.isAutoGenerated) {
              this.validate = this.makeValidate(descriptors);
            }
          }
        },
        /**
         * Make a function which can cast property values to the correct type.
         * @type {Function}
         */
        makeCast: {
          configurable: true,
          value: function (descriptors) {
            var castAll = Casting.forDescriptors(descriptors),
                fn = function (value) {
                  if (!(value instanceof this)) {
                   return new this(value);
                  }
                  else {
                    return castAll(value);
                  }
                };

            fn.isAutoGenerated = true;
            return fn;
          }
        },
        /**
         * Make a function which can validate instances of the class.
         * @type {Function}
         */
        makeValidate: {
          configurable: true,
          value: function (descriptors) {
            var validate = Validating.forDescriptors(descriptors);
            validate.isAutoGenerated = true;
            return validate;
          }
        },
        /**
         * Make an efficient `configure()` function to set property values
         * for an object based on the given descriptors.
         *
         * @param  {Object} descriptors The descriptors for the object.
         * @return {Function}           The `configure()` function.
         */
        makeConfigure: {
          configurable: true,
          value: function (descriptors) {
            var keys = Object.keys(descriptors),
                total = keys.length,
                casters = {},
                body = '',
                accessor, key, descriptor, i;

            for (i = 0; i < total; i++) {
              key = keys[i];
              descriptor = descriptors[key];
              if (descriptor.writable || descriptor.hasOwnProperty('set')) {
                if (/^([\w|_|$]+)$/.test(key)) {
                  accessor = '.' + key;
                }
                else {
                  accessor = '["' + key + '"]';
                }
                body += 'if (config' + accessor + ' !== undefined) {\n';
                if (descriptor.type != null && ((casters[key] = Casting.get(descriptor.type)) != null)) {
                  body += 'this' + accessor + ' = config' + accessor + ' !== null ? casters' + accessor + '(config' + accessor + ') : null;\n'; // jshint ignore:line
                }
                else {
                  body += 'this' + accessor + ' = config' + accessor + ';\n';
                }
                body += '}';
              }
            }

            var fn = new Function('casters', 'config', body); // jshint ignore:line
            var configure = function (config) {
              return fn.call(this, casters, config);
            };
            configure.isAutoGenerated = true;
            return configure;
          }
        }
      });
    }
  }
});

module.exports = Modeling;